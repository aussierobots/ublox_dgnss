{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UBX-CFG Parameters Schema",
  "description": "Schema for defining UBX-CFG parameters for u-blox GNSS receivers",
  "type": "object",
  "required": ["version", "device_types", "firmware_versions", "parameters"],
  "properties": {
    "version": {
      "type": "string",
      "description": "Version of the parameter definition file",
      "pattern": "^\\d+\\.\\d+\\.\\d+$"
    },
    "device_types": {
      "type": "array",
      "description": "List of supported device types",
      "items": {
        "type": "string",
        "enum": ["ZED-F9P", "ZED-F9R"]
      },
      "minItems": 1,
      "uniqueItems": true
    },
    "firmware_versions": {
      "type": "object",
      "description": "Mapping of device types to supported firmware versions",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["version", "description"],
          "properties": {
            "version": {
              "type": "string",
              "description": "Firmware version string (e.g., 'HPG 1.32', 'HPS 1.30')",
              "pattern": "^[A-Z]+ \\d+\\.\\d+$"
            },
            "description": {
              "type": "string",
              "description": "Description of the firmware version"
            },
            "release_date": {
              "type": "string",
              "description": "Release date of the firmware version",
              "format": "date"
            }
          }
        },
        "minItems": 1
      },
      "minProperties": 1
    },
    "parameters": {
      "type": "array",
      "description": "List of UBX-CFG parameters",
      "items": {
        "$ref": "#/definitions/parameter"
      },
      "minItems": 1
    }
  },
  "definitions": {
    "parameter": {
      "type": "object",
      "required": ["name", "key_id", "type", "scale", "unit", "applicable_devices", "description"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Parameter name (e.g., CFG_INFMSG_UBX_USB)",
          "pattern": "^CFG_[A-Z0-9_]+$"
        },
        "key_id": {
          "type": "string",
          "description": "Key ID in hexadecimal format (e.g., 0x20920004)",
          "pattern": "^0x[0-9A-Fa-f]{8}$"
        },
        "type": {
          "type": "string",
          "description": "Parameter data type",
          "enum": ["L", "U1", "I1", "X1", "E1", "U2", "I2", "X2", "U4", "I4", "X4", "R4", "R8"]
        },
        "scale": {
          "type": "number",
          "description": "Scaling factor for the parameter value",
          "exclusiveMinimum": 0
        },
        "unit": {
          "type": "string",
          "description": "Unit of the parameter value",
          "enum": ["NA", "M", "Y", "MONTH", "D", "H", "MIN", "S", "HZ", "MA", "MS", "DEG", "MM", "CM", "MPS"]
        },
        "applicable_devices": {
          "type": "array",
          "description": "List of device types this parameter applies to",
          "items": {
            "type": "string",
            "enum": ["ZED-F9P", "ZED-F9R"]
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "description": {
          "type": "string",
          "description": "Description of the parameter",
          "minLength": 5
        },
        "possible_values": {
          "type": "object",
          "description": "Map of possible values for enumerated types",
          "additionalProperties": {
            "type": "string",
            "pattern": "^0x[0-9A-Fa-f]+$"
          },
          "minProperties": 1
        },
        "default_value": {
          "type": "string",
          "description": "Default value of the parameter in hexadecimal format",
          "pattern": "^0x[0-9A-Fa-f]+$"
        },
        "min_value": {
          "type": "string",
          "description": "Minimum allowed value in hexadecimal format",
          "pattern": "^0x[0-9A-Fa-f]+$"
        },
        "max_value": {
          "type": "string",
          "description": "Maximum allowed value in hexadecimal format",
          "pattern": "^0x[0-9A-Fa-f]+$"
        },
        "group": {
          "type": "string",
          "description": "Functional group of the parameter (e.g., INFMSG, UART, SIGNAL)",
          "pattern": "^[A-Z0-9_]+$"
        },
        "notes": {
          "type": "string",
          "description": "Additional notes about the parameter"
        },
        "firmware_support": {
          "type": "object",
          "description": "Firmware version support information",
          "additionalProperties": {
            "type": "object",
            "required": ["since"],
            "properties": {
              "since": {
                "type": "string",
                "description": "Firmware version when this parameter was introduced",
                "pattern": "^[A-Z]+ \\d+\\.\\d+$"
              },
              "until": {
                "type": "string",
                "description": "Firmware version when this parameter was deprecated (if applicable)",
                "pattern": "^[A-Z]+ \\d+\\.\\d+$"
              },
              "behavior_changes": {
                "type": "array",
                "description": "List of firmware versions where this parameter's behavior changed",
                "items": {
                  "type": "object",
                  "required": ["version", "description"],
                  "properties": {
                    "version": {
                      "type": "string",
                      "pattern": "^[A-Z]+ \\d+\\.\\d+$"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "dependencies": {
        "min_value": ["max_value"],
        "max_value": ["min_value"]
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "enum": ["E1"]
              }
            }
          },
          "then": {
            "required": ["possible_values"]
          }
        }
      ]
    }
  }
}
